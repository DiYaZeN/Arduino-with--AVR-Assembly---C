
5LEDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000908  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
    /* Replace with your application code */
 
		DDRB = 0b00011111 ;// set bit 0 of DDRB & configure PB0 as an output
  80:	8f e1       	ldi	r24, 0x1F	; 31
  82:	84 b9       	out	0x04, r24	; 4
		
		while(1)
		{
			
			//1 
			PORTB = PORTB | 0b00000001; // set bit 0 of PORTB and turn on LED without affecting other bits
  84:	85 b1       	in	r24, 0x05	; 5
  86:	81 60       	ori	r24, 0x01	; 1
  88:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	80 e7       	ldi	r24, 0x70	; 112
  8e:	92 e0       	ldi	r25, 0x02	; 2
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x10>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x1a>
  9a:	00 00       	nop
			_delay_ms(50); //wait for 200ms
			PORTB = PORTB & 0b00000000; // clear bit 0 of PORTB and turn off LED without affecting other bits
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	15 b8       	out	0x05, r1	; 5
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
			_delay_ms(50); // wait for 200ms
			
			//2
			
			PORTB = PORTB | 0b00000010; // set bit 0 of PORTB and turn on LED without affecting other bits
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	80 e7       	ldi	r24, 0x70	; 112
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
			_delay_ms(50); //wait for 200ms
			PORTB = PORTB & 0b00000000; // clear bit 0 of PORTB and turn off LED without affecting other bits
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	15 b8       	out	0x05, r1	; 5
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
			_delay_ms(50); // wait for 200ms
			
			//3
			PORTB = PORTB | 0b00000100; // set bit 0 of PORTB and turn on LED without affecting other bits
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 e7       	ldi	r24, 0x70	; 112
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
			_delay_ms(50); //wait for 200ms
			PORTB = PORTB & 0b00000000; // clear bit 0 of PORTB and turn off LED without affecting other bits
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	15 b8       	out	0x05, r1	; 5
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	80 e7       	ldi	r24, 0x70	; 112
 100:	92 e0       	ldi	r25, 0x02	; 2
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x82>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8c>
 10c:	00 00       	nop
			_delay_ms(50); // wait for 200ms
			//4
			
			PORTB = PORTB | 0b00001000; // set bit 0 of PORTB and turn on LED without affecting other bits
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	88 60       	ori	r24, 0x08	; 8
 112:	85 b9       	out	0x05, r24	; 5
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	80 e7       	ldi	r24, 0x70	; 112
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x9a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xa4>
 124:	00 00       	nop
			_delay_ms(50); //wait for 200ms
			PORTB = PORTB & 0b00000000; // clear bit 0 of PORTB and turn off LED without affecting other bits
 126:	85 b1       	in	r24, 0x05	; 5
 128:	15 b8       	out	0x05, r1	; 5
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xb0>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xba>
 13a:	00 00       	nop
			_delay_ms(50); // wait for 200ms
			//5
			PORTB = PORTB | 0b00010000; // set bit 0 of PORTB and turn on LED without affecting other bits
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	85 b9       	out	0x05, r24	; 5
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	80 e7       	ldi	r24, 0x70	; 112
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xc8>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xd2>
 152:	00 00       	nop
			_delay_ms(50); //wait for 200ms
			PORTB = PORTB & 0b00000000; // clear bit 0 of PORTB and turn off LED without affecting other bits
 154:	85 b1       	in	r24, 0x05	; 5
 156:	15 b8       	out	0x05, r1	; 5
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	80 e7       	ldi	r24, 0x70	; 112
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xde>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xe8>
 168:	00 00       	nop
 16a:	8c cf       	rjmp	.-232    	; 0x84 <main+0x4>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
